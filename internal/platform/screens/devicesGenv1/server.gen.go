// Package devicesGenv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package devicesGenv1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"net/url"
	"path"
	"strings"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
